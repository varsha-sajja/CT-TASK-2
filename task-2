{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "**SPEECH RECOGNITION SYSTEM**\n",
        "- BUILD A BASIC SPEECH-TO-TEXT SYSTEM\n",
        "USING PRE-TRAINED MODELS AND\n",
        "LIBRARIES LIKE SPEECHRECOGNITION OR\n",
        "WAV2VEC.\n",
        "- DELIVERABLE: A FUNCTIONAL SYSTEM\n",
        "CAPABLE OF TRANSCRIBING SHORT AUDIO\n",
        "CLIP"
      ],
      "metadata": {
        "id": "kbyZ6m32716h"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import speech_recognition as sr\n",
        "from pydub import AudioSegment"
      ],
      "metadata": {
        "id": "0S1Xu2pP12yC"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "id": "Pu46BX877stj",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7c7fccca-f4b6-4955-b9ba-3b4781131ecf"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Loading audio file...\n",
            "Transcribing audio...\n",
            "Transcription:\n",
            " thankyou codtech IT solutions\n"
          ]
        }
      ],
      "source": [
        "def transcribe_audio(audio_path):\n",
        "\n",
        "    sound = AudioSegment.from_mp3(audio_path)\n",
        "    sound.export(\"temp_audio.wav\", format=\"wav\")\n",
        "\n",
        "    recognizer = sr.Recognizer()\n",
        "\n",
        "    with sr.AudioFile(\"temp_audio.wav\") as source:\n",
        "        print(\"Loading audio file...\")\n",
        "        audio_data = recognizer.record(source)\n",
        "\n",
        "    try:\n",
        "        print(\"Transcribing audio...\")\n",
        "        transcription = recognizer.recognize_google(audio_data)\n",
        "        return transcription\n",
        "    except sr.UnknownValueError:\n",
        "        return \"Speech Recognition could not understand the audio.\"\n",
        "    except sr.RequestError as e:\n",
        "        return f\"Could not request results from the service: {e}\"\n",
        "\n",
        "\n",
        "audio_file_path = \""C:\Users\bhava\OneDrive\Desktop\audio1.unknown""\" #Replace with your audio file path\n",
        "result = transcribe_audio(audio_file_path)\n",
        "print(\"Transcription:\\n\", result)"
      ]
    }
  ]
}
